package spockintro.commons

import pogo.ProductPOGO
import pogo.ProductPOGOv2
import pogo.ProductPOGOv3
import spock.lang.Specification

/**
 * KEY POINTS:
 * - Groovy Goodness
 */
class GroovyFeaturesTest extends Specification {

    /**
     * KEY POINTS:
     * - map-based constructor
     * - telescoping constructors, builders - out
     * - corresponding sequence is not required
     */
    def "should correctly build product POGO"() {

        when:
        def product = new ProductPOGO(name: "Candy", price: 2, id: 1)

        then:
        product.id == 1
        product.name == "Candy"
        product.price == 2
    }

    /**
     * KEY POINTS:
     * - looks like property access, but groovy use custom getter
     * - visibly custom methods
     */
    def "should add company name at least of product name"() {

        when:
        def product = new ProductPOGOv2(name: "Candy")

        then:
        product.name == "Candy, Arni Best Food"
    }

    /**
     * KEY POINTS:
     * - toString generated by annotation @groovy.transform.ToString
     * - auto converted after adding/removing field from class
     * - don't need to test it
     */
    def "should correctly generate output from toString()"() {

        when:
        def product = new ProductPOGO(id: 1, name: "Candy", price: 2)

        then:
        product.toString() == "ProductPOGO(id:1, name:Candy, price:2)"
    }

    /**
     * KEY POINTS
     * - clearly, compactly
     */
    def "should transform product name"() {

        given:
        def product = new ProductPOGOv3(name: "Candy")

        when:
        def productName = product.getName ({
            name -> "The best $name"
        })

        then:
        productName == "The best Candy"
    }

    /**
     * KEY POINTS
     * - clearly
     * - unified
     */
    def "unified java api example"() {
        when:
        String[] array = new String[0]
        Collection<String> collection = []
        String string = ""

        then:
        array.size() == 0
        collection.size() == 0
        string.size() == 0
    }

    /**
     * KEY POINTS
     * - duck typing
     * - it can be switch off by @groovy.transform.TypeChecked
     */
//    @groovy.transform.TypeChecked
    def "should register all quackable animals sound"() {

        when:
        def quackers = [ new Duck(), new Frog() ]

        then:
        quackers.collect { q -> q.quack() } == [ "I am a Duck", "I am a Frog" ]
    }

    class Duck {
        String quack() { "I am a Duck" }
    }

    class Frog {
        String quack() { "I am a Frog" }
    }

    def "adding lists"() {
        given:
        List left = ["Hello"]
        List right = ["Spock"]

        when:
        List result = left + right

        then:
        result == ["Hello", "Spock"]
    }

    /**
     * KEY POINTS
     * - rich GString api
     * - very useful for e2e test
     */
    def """
            Story: As a customer I want to buy a product

            When I open the main page i want to see all available product
            When I add any product to basket
            Then Basket should contain 1 item

            When I checkout
            Then I should be able to submit order with 1 product

            When I submit the order
            Then That order should be confirmed

            """() {
        expect: true
    }

    class Tejst {
        private String privateToString() {
            "123"
        }
        String toString() {
            privateToString()
        }
    }
    def "should override object method"() {
        def o = new Tejst()
        o.metaClass.privateToString = { "tejst" }
        def oo = new Tejst()
        expect:
            o.toString() == "tejst"
            oo.toString() == "123"
    }
}